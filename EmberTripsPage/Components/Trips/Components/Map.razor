@using EmberTripsPage.Models.Interfaces
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="panel map-component" id="@MapId">
</div>

@code {
    [Parameter]
    public ITrip? Trip { get; set; }

    private IJSObjectReference? module;
    private DotNetObjectReference<Map>? dotNetObjectReference;

    private const string MapId = "map-container";

    // Default map center (Edinburgh)
    private double initialLatitude = 55.9533;
    private double initialLongitude = -3.1883;
    private int initialZoom = 10;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/mapInterop.js");
                dotNetObjectReference = DotNetObjectReference.Create(this);

                await module.InvokeVoidAsync("initializeMap", MapId, initialLatitude, initialLongitude, initialZoom, dotNetObjectReference);
            }
            catch (JSException ex)
            {
                Console.WriteLine($"Error initializing map: {ex.Message}");
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await DrawCurrentRoute();
        StateHasChanged();
    }

    private async Task DrawCurrentRoute()
    {
        if (Trip != null && Trip.GetStops() != null)
        {
            var stops = Trip.GetStops();

            foreach (var stop in stops)
            {
                var lat = stop.GetLocation().Latitude;
                var lng = stop.GetLocation().Longitude;
                var popupText = stop.GetLocation().Name + "<br> ETA: " + stop.GetFormattedDepartureEta(Trip.GetStartTimeUTC());
                var stopType = Trip.GetStopType(stop);

                await AddWaypointToMap(lat, lng, popupText, stopType.ToString().ToLower());
            }

            await AddRoute();

            var minLat = stops.Select(x => x.GetLocation().Latitude).Min();
            var maxLat = stops.Select(x => x.GetLocation().Latitude).Max();
            var minLong = stops.Select(x => x.GetLocation().Longitude).Min();
            var maxLong = stops.Select(x => x.GetLocation().Longitude).Max();

            await FitBounds(minLat, minLong, maxLat, maxLong);
        }
    }

    private async Task AddWaypointToMap(double lat, double lng, string popupText, string stopClass)
    {
        if (module is not null)
        {
            try
            {
                await module.InvokeVoidAsync("addMarker", lat, lng, popupText, stopClass);
            }
            catch (JSException ex)
            {
                Console.WriteLine($"Error adding marker: {ex.Message}");
            }
        }
    }

    private async Task AddRoute()
    {
        if (module is not null)
        {
            try
            {
                await module.InvokeVoidAsync("addRoute");
            }
            catch (JSException ex)
            {
                Console.WriteLine($"Error adding marker: {ex.Message}");
            }
        }
    }

    private async Task FitBounds(double minLat, double minLong, double maxLat, double maxLong)
    {
        if (module is not null)
        {
            try
            {
                await module.InvokeVoidAsync("fitBounds", minLat, minLong, maxLat, maxLong);
            }
            catch (JSException ex)
            {
                Console.WriteLine($"Error fitting bounds: {ex.Message}");
            }
        }
    }

    private async Task ClearMap()
    {
        if (module is not null)
        {
            try
            {
                await module.InvokeVoidAsync("clearWaypointsAndRoute");
            }
            catch (JSException ex)
            {
                Console.WriteLine($"Error clearing map: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (dotNetObjectReference != null)
        {
            dotNetObjectReference.Dispose(); // Important to prevent memory leaks
        }
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
